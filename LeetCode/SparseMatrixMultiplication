package leetCode.medium;

/**
 * Created by Ahmad Eldefrawy.
 */

public class SparseMatrixMultiplication {

    public static void main(String[] args) {
        int[][] A = {{1, 2}, {3, 4}, {5, 6}};
        int[][] B = {{1, 2, 3}, {4, 5, 6}};

        multiply(A, B);
    }

    public static int[][] multiply(int[][] A, int[][] B) {
        int resultRows = A.length;
        int resultCols = B[0].length;
        int[][] result = new int[resultRows][resultCols];

        for (int rowA = 0; rowA < resultRows; rowA++) {
            for (int colB = 0; colB < resultCols; colB++) {
                int sum = 0;
                // We now have the 2 arrays necessary for the current position rowA and colB fixed
                for (int current = 0; current < B.length; current++) {
                    sum += A[rowA][current] * B[current][colB] ;
                }
                result[rowA][colB] = sum;
            }

        }
        return result;
    }
}
