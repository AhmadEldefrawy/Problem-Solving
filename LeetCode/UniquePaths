package leetCode.medium;

/**
 * Created by Ahmad Eldefrawy
 */

public class UniquePaths {

  public static void main(String[] args) {
      System.out.println(uniquePaths(2, 1));
  }

  /*
  * Bottom to Top Apporach
  *
  *  +---+---+---+
  *  | 6 | 3 | 1 |
  *  +---+---+---+
	*  | 3 | 2 | 1 |
	*  +---+---+---+
	*  | 1 | 1 | 0 |
	*  +---+---+---+
  *
  * */
    
  public static int[][] memo;

  public static int uniquePaths(int m, int n) {
      memo = new int[m][n];
      return countPaths(0, 0);
  }

  private static int countPaths(int row, int col) {
      if (row == memo.length || col == memo[0].length) {
          return 0;
      } else if (row == memo.length - 1 && col == memo[0].length - 1) {
          return 1;
      } else {
          if (memo[row][col] == 0) {
              return memo[row][col] = countPaths(row, col + 1) + countPaths(row + 1, col);
          } else {
              return memo[row][col];
          }
      }
   }

  /*
  * Top to Bottom Apporach
  *
  *  +---+---+---+
  *  | 1 | 1 | 1 |
  *  +---+---+---+
	*  | 1 | 2 | 3 |
	*  +---+---+---+
	*  | 1 | 3 | 6 |
	*  +---+---+---+
  *
  * */
  
  public int uniquePaths(int m, int n) {
      int[][] grid = new int[m][n];
      for (int row = 0; row < m; row++) {
          for (int col = 0; col < n; col++) {
              if (row == 0 || col == 0) {
                  grid[row][col] = 1;
              } else {
                  grid[row][col] = grid[row][col - 1] + grid[row - 1][col];
              }
          }
      }
      return grid[m - 1][n - 1];
  }
}

