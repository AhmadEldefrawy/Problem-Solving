package leetCode.easy;

/**
 * Created by Ahmad Eldefrawy.
 * Time: O(n)
 * Space: O(n)
 */

public class ClimbingStairs {

    // === End to Front Approach === //
    int[] arr;
    public int climbStairs(int n) {
        // Array of 4 in case of n = 3
        // 0(0), 1(1), 2(2), 3(arr[2] + arr[1] = 3)
        arr = new int[n+1];

        return countPaths(n);
    }

    public int countPaths(int n) {
        if (n == 0 || n == 1 || n == 2)
            return n;

        if (arr[n-1] == 0)
            arr[n-1] = countPaths(n-1);

        if (arr[n-2] == 0)
            arr[n-2] = countPaths(n-2);

        return  arr[n-1] + arr[n-2];
    }
    //===================================//

    // === Front to End approach === //
    public int climbStairs(int n) {
        if (n == 1) {
            return 1;
        }
        int[] memo = new int[n + 1];
        memo[1] = 1;
        memo[2] = 2;
        for (int i = 3; i <= n; i++) {
            memo[i] = memo[i - 1] + memo[i - 2];
        }
        return memo[n];
    }

}
