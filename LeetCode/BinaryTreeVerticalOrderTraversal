package leetCode.medium;

import java.util.*;

/**
 * Created by Ahmad Eldefrawy
 * Time O(n)
 * Space O(n)
 */

public class BinaryTreeVerticalOrderTraversal {

    public static class TreeNode {

        TreeNode(int val) {
            this.data = val;
        }
        int data;
        TreeNode left;
        TreeNode right;
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        TreeNode two = new TreeNode(2);
        TreeNode three = new TreeNode(3);
        TreeNode four = new TreeNode(4);
        TreeNode five = new TreeNode(5);
        TreeNode six = new TreeNode(6);
        TreeNode seven = new TreeNode(7);
        TreeNode eight = new TreeNode(8);
        TreeNode nine = new TreeNode(9);
        root.left = two;
        root.right = three;
        two.left = four;
        two.right = five;
        three.left = six;
        three.right = seven;
        six.right = eight;
        seven.right = nine;
        verticalOrder(root);
    }

    // Traverse Tree preOrder and Populate HashMap of <Level, data values>
    // Iterate over Hashmap in ascending order
    private static HashMap<Integer, ArrayList<Integer>> columns = new HashMap<>();
    private static int min = 0, max = 0;

    public static ArrayList<ArrayList<Integer>> verticalOrder(TreeNode root) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        traverse(root, 0);

        for (int i = min; i <= max; i++) {
            System.out.println(columns.get(i));
            result.add(columns.get(i));
        }
        return result;
    }

    private static void traverse(TreeNode root, int level) {
        if (root == null)
            return;
        // Updating min and max level values
        min = (level < min) ? level : min;
        max = (level > min) ? level : max;

        ArrayList<Integer> currentList = columns.getOrDefault(level, new ArrayList<>());
        currentList.add(root.data);
        columns.put(level, currentList);
        traverse(root.left, level - 1);
        traverse(root.right, level + 1);
    }
}
